@use 'sass:math';

// Spacing base values
$base-padding: 0.75rem !default;
$base-margin: 0.75rem !default;

$utilities: (
    // Paddings
    "padding": (
        "prefix": "p",
        "values": (
            "0": 0,
            "1": $base-padding,
            "2": $base-padding * 2,
            "3": $base-padding * 4,
            "4": $base-padding * 6,
            "5": $base-padding * 8,
        )
    ),

    "padding-left": (
        "prefix": "pl",
        "values": (
            "0": 0,
            "1": $base-padding,
            "2": $base-padding * 2,
            "3": $base-padding * 4,
            "4": $base-padding * 6,
            "5": $base-padding * 8,
        )
    ),

    "padding-right": (
        "prefix": "pr",
        "values": (
            "0": 0,
            "1": $base-padding,
            "2": $base-padding * 2,
            "3": $base-padding * 4,
            "4": $base-padding * 6,
            "5": $base-padding * 8,
        )
    ),

    "padding-top": (
        "prefix": "pt",
        "values": (
            "0": 0,
            "1": $base-padding,
            "2": $base-padding * 2,
            "3": $base-padding * 4,
            "4": $base-padding * 6,
            "5": $base-padding * 8,
        )
    ),

    "padding-bottom": (
        "prefix": "pb",
        "values": (
            "0": 0,
            "1": $base-padding,
            "2": $base-padding * 2,
            "3": $base-padding * 4,
            "4": $base-padding * 6,
            "5": $base-padding * 8,
        )
    ),

    // Margin utilities
    "margin": (
        "prefix": "m",
        "values": (
            "0": 0,
            "1": $base-margin,
            "2": $base-margin * 2,
            "3": $base-margin * 4,
            "4": $base-margin * 6,
            "5": $base-margin * 8,
        )
    ),

    "margin-left": (
        "prefix": "ml",
        "values": (
            "0": 0,
            "1": $base-margin,
            "2": $base-margin * 2,
            "3": $base-margin * 4,
            "4": $base-margin * 6,
            "5": $base-margin * 8,
        )
    ),

    "margin-right": (
        "prefix": "mr",
        "values": (
            "0": 0,
            "1": $base-margin,
            "2": $base-margin * 2,
            "3": $base-margin * 4,
            "4": $base-margin * 6,
            "5": $base-margin * 8,
        )
    ),

    "margin-top": (
        "prefix": "mt",
        "values": (
            "0": 0,
            "1": $base-margin,
            "2": $base-margin * 2,
            "3": $base-margin * 4,
            "4": $base-margin * 6,
            "5": $base-margin * 8,
        )
    ),

    "margin-bottom": (
        "prefix": "mb",
        "values": (
            "0": 0,
            "1": $base-margin,
            "2": $base-margin * 2,
            "3": $base-margin * 4,
            "4": $base-margin * 6,
            "5": $base-margin * 8,
        )
    ),

    // New padding-x (left and right) - combine pl and pr
    "padding-x": (
        "prefix": "px",
        "values": (
            "0": 0,
            "1": $base-padding,
            "2": $base-padding * 2,
            "3": $base-padding * 4,
            "4": $base-padding * 6,
            "5": $base-padding * 8,
        )
    ),

    // New padding-y (top and bottom) - combine pt and pb
    "padding-y": (
        "prefix": "py",
        "values": (
            "0": 0,
            "1": $base-padding,
            "2": $base-padding * 2,
            "3": $base-padding * 4,
            "4": $base-padding * 6,
            "5": $base-padding * 8,
        )
    ),

    // New margin-x (left and right) - combine ml and mr
    "margin-x": (
        "prefix": "mx",
        "values": (
            "0": 0,
            "1": $base-margin,
            "2": $base-margin * 2,
            "3": $base-margin * 4,
            "4": $base-margin * 6,
            "5": $base-margin * 8,
        )
    ),

    // New margin-y (top and bottom) - combine mt and mb
    "margin-y": (
        "prefix": "my",
        "values": (
            "0": 0,
            "1": $base-margin,
            "2": $base-margin * 2,
            "3": $base-margin * 4,
            "4": $base-margin * 6,
            "5": $base-margin * 8,
        )
    ),

    "width": (
        "prefix": "w",
        "values": (
            "0": 0rem,
            "01": 0.1rem,
            "02": 0.2rem,
            "03": 0.3rem,
            "04": 0.4rem,
            "05": 0.5rem,
            "06": 0.6rem,
            "07": 0.7rem,
            "08": 0.8rem,
            "09": 0.9rem,
            "1": 1rem,
            "2": 2rem,
            "3": 3rem,
            "4": 4rem,
            "5": 5rem,
            "6": 6rem,
            "8": 8rem,
            "10": 10rem,
            "12": 12rem,
            "14": 14rem,
            "16": 16rem,
            "20": 20rem,
            "25": 25rem,
            "30": 30rem,
            "35": 35rem,
            "40": 40rem,
            "45": 45rem,
            "50": 50rem,
            "55": 55rem,
            "60": 60rem,
            "65": 65rem,
            "70": 70rem,
            "75": 75rem,
            "80": 80rem,
            "85": 85rem,
            "90": 90rem,
            "95": 95rem,
            "100": 100rem,
            "full": 100%,
            "100vw": 100vw
        )
    ),

    "height": (
        "prefix": "h",
        "values": (
            "0": 0rem,
            "01": 0.1rem,
            "02": 0.2rem,
            "03": 0.3rem,
            "04": 0.4rem,
            "05": 0.5rem,
            "06": 0.6rem,
            "07": 0.7rem,
            "08": 0.8rem,
            "09": 0.9rem,
            "1": 1rem,
            "2": 2rem,
            "3": 3rem,
            "4": 4rem,
            "5": 5rem,
            "6": 6rem,
            "8": 8rem,
            "10": 10rem,
            "12": 12rem,
            "14": 14rem,
            "16": 16rem,
            "20": 20rem,
            "25": 25rem,
            "30": 30rem,
            "35": 35rem,
            "40": 40rem,
            "45": 45rem,
            "50": 50rem,
            "55": 55rem,
            "60": 60rem,
            "65": 65rem,
            "70": 70rem,
            "75": 75rem,
            "80": 80rem,
            "85": 85rem,
            "90": 90rem,
            "95": 95rem,
            "100": 100rem,
            "full": 100%,
            "100vh": 100vh
        )
    ),

    // Opacity
    "opacity": (
        "prefix": 'o',
        "values": (
            "0": 0,
            "10": 0.1,
            "20": 0.2,
            "30": 0.3,
            "40": 0.4,
            "50": 0.5,
            "60": 0.6,
            "70": 0.7,
            "80": 0.8,
            "90": 0.9,
            "100": 1,
        )
    ),

    // Border-radius
    "border-radius": (
        "prefix": "br",
        "values": (
            "none": 0,
            "default": $base-border-radius,
            "xs": math.div($base-border-radius, 4),
            "sm": math.div($base-border-radius, 2),
            "md": $base-border-radius * 2,
            "lg": $base-border-radius * 4,
            "full": 50%
        )
    ),

    // Font sizes
    "font-size": (
        "prefix": "fz",
        "values": (
            "xs": $xs-font-size,
            "sm": $sm-font-size,
            "md": $base-font-size,
            "lg": $lg-font-size,
            "xl": $xl-font-size,
            "xxl": $xxl-font-size,
        )
    ),

    // Font weight
    'font-weight': (
        "prefix": 'font',
        "values": (
            "thin": 100,
            "extralight": 200,
            "light": 300,
            "normal": 400,
            "medium": 500,
            "semibold": 600,
            "bold": 700,
            "extrabold": 800
        )
    ),

    // Font style
    "font-style": (
        "prefix": "font-style",
        "values": (
            "normal": normal,
            "italic": italic,
            "oblique": oblique
        )
    ),

    // Letter spacing
    "letter-spacing": (
        "prefix": "ls",
        "values": (
            "0": $letter-spacing-0,
            "1": $letter-spacing-1,
            "2": $letter-spacing-2,
            "3": $letter-spacing-3,
            "4": $letter-spacing-4,
            "5": $letter-spacing-5,
            "6": $letter-spacing-6
        )
    ),

    // Cursor
    "cursor": (
        "prefix": 'cursor',
        "values": (
            "auto": auto,
            "default": default,
            "pointer": pointer,
            "wait": wait,
            "text": text,
            "move": move,
            "help": help,
            "none": none,
            "cell": cell,
            "crosshair": crosshair,
            "alias": alias,
            "copy": copy,
            "grab": grab
        )
    ),

    // Justify content
    "justify-content": (
        "prefix": "justify",
        "values": (
            "center": center,
            "start": start,
            "end": end,
            "between": space-between,
            "around": space-around
        )
    ),

    // Align items
    "align-items": (
        "prefix": "align",
        "values": (
            "center": center,
            "start": start,
            "end": end
        )
    ),

    // Flex direction
    "flex-direction": (
        "prefix": 'flex',
        "values": (
            "row": row,
            "row-reverse": row-reverse,
            "column": column,
            "column-reverse": column-reverse,
        )
    ),

    // Flex wrap
    "flex-wrap": (
        "prefix": "flex",
        "values": (
            "nowrap": nowrap,
            "wrap": wrap,
            "wrap-reverse": wrap-reverse
        )
    ),

    // Background attachment
    "background-attachment": (
        "prefix": "attachment",
        "values": (
            "scroll": scroll,
            "fixed": fixed,
            "local": local
        )
    ),

    // Background position
    "background-position": (
        "prefix": "bg",
        "values": (
            "top": top,
             "bottom": bottom,
             "left": left,
             "right": right,
             "center": center
        )
    ),

    // Background repeat
    "background-repeat": (
        "prefix": "bg",
        "values": (
            "repeat": repeat,
            "repeat-x": repeat-x,
            "repeat-y": repeat-y,
            "space": space,
            "round": round,
            "no-repeat": no-repeat
        )
    ),

    // Background size
    "background-size": (
        "prefix": "bg",
        "values": (
            "cover": cover,
            "contain": contain
        )
    ),
);


// Helper function to handle shorthand properties (x, y) dynamically
@function get-shorthand-property($property) {
    @if $property =="padding-x" {
        @return ("padding-left", "padding-right");
    }

    @else if $property =="padding-y" {
        @return ("padding-top", "padding-bottom");
    }

    @else if $property =="margin-x" {
        @return ("margin-left", "margin-right");
    }

    @else if $property =="margin-y" {
        @return ("margin-top", "margin-bottom");
    }

    @else {
        @return $property;
    }
}


// Iterate over each property-map pair in the $utilities map
@each $property, $map in $utilities {
    $prefix: map-get($map, "prefix"); // Define prefix variable
    $values: map-get($map, "values"); // Define a values variable with a map of values

    // Iterate over each key-val pair in the $values map
    @each $key, $val in $values {

        // Check if the $key value is equal to 'default' to make the prefix shorter
        @if $key =='default' {
            .#{$prefix} {
                #{$property}: #{$val};
            }

            // Iterate over each bp_key-bp_val pair to generate color classes for each breakpoint
            @each $bp_key, $bp-val in $breakpoints {
                @media (min-width: $bp_val) {
                    .#{$bp_key}\:#{$prefix} {
                        #{$property}: #{$val} !important;
                    }
                }
            }
        }

        @else {
            // Define a class for each property in the utilities map
            .#{$prefix}-#{$key} {
                // Get the shorthand properties if it's one of the x/y shorthand types
                $expanded-properties: get-shorthand-property($property);

                // Apply the rule for expanded properties or the regular property
                @if $expanded-properties !=$property {
                    @each $expanded-property in $expanded-properties {
                        #{$expanded-property}: #{$val};
                    }
                }

                @else {
                    #{$property}: #{$val};
                }
            }

            // Iterate over each bp_key-bp_val pair to generate color classes for each breakpoint
            @each $bp_key, $bp-val in $breakpoints {
                @media (min-width: $bp_val) {
                    .#{$bp_key}\:#{$prefix}-#{$key} {
                        // Get the shorthand properties if it's one of the x/y shorthand types
                        $expanded-properties: get-shorthand-property($property);

                        // Apply the rule for expanded properties or the regular property
                        @if $expanded-properties !=$property {
                            @each $expanded-property in $expanded-properties {
                                #{$expanded-property}: #{$val} !important;
                            }
                        }

                        @else {
                            #{$property}: #{$val} !important;
                        }
                    }
                }
            }
        }
    }
}